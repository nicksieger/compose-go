//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by deepcopy-gen. DO NOT EDIT.

package types

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BlkioConfig) DeepCopyInto(out *BlkioConfig) {
	*out = *in
	if in.WeightDevice != nil {
		in, out := &in.WeightDevice, &out.WeightDevice
		*out = make([]WeightDevice, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DeviceReadBps != nil {
		in, out := &in.DeviceReadBps, &out.DeviceReadBps
		*out = make([]ThrottleDevice, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DeviceReadIOps != nil {
		in, out := &in.DeviceReadIOps, &out.DeviceReadIOps
		*out = make([]ThrottleDevice, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DeviceWriteBps != nil {
		in, out := &in.DeviceWriteBps, &out.DeviceWriteBps
		*out = make([]ThrottleDevice, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DeviceWriteIOps != nil {
		in, out := &in.DeviceWriteIOps, &out.DeviceWriteIOps
		*out = make([]ThrottleDevice, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Extensions != nil {
		out.Extensions = in.Extensions.DeepCopyExtensions()
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BlkioConfig.
func (in *BlkioConfig) DeepCopy() *BlkioConfig {
	if in == nil {
		return nil
	}
	out := new(BlkioConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BuildConfig) DeepCopyInto(out *BuildConfig) {
	*out = *in
	if in.Entitlements != nil {
		in, out := &in.Entitlements, &out.Entitlements
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Args != nil {
		in, out := &in.Args, &out.Args
		*out = make(MappingWithEquals, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.SSH != nil {
		in, out := &in.SSH, &out.SSH
		*out = make(SSHConfig, len(*in))
		copy(*out, *in)
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(Labels, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.CacheFrom != nil {
		in, out := &in.CacheFrom, &out.CacheFrom
		*out = make(StringList, len(*in))
		copy(*out, *in)
	}
	if in.CacheTo != nil {
		in, out := &in.CacheTo, &out.CacheTo
		*out = make(StringList, len(*in))
		copy(*out, *in)
	}
	if in.AdditionalContexts != nil {
		in, out := &in.AdditionalContexts, &out.AdditionalContexts
		*out = make(Mapping, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.ExtraHosts != nil {
		in, out := &in.ExtraHosts, &out.ExtraHosts
		*out = make(HostsList, len(*in))
		for key, val := range *in {
			var outVal []string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = make([]string, len(*in))
				copy(*out, *in)
			}
			(*out)[key] = outVal
		}
	}
	if in.Secrets != nil {
		in, out := &in.Secrets, &out.Secrets
		*out = make([]ServiceSecretConfig, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(StringList, len(*in))
		copy(*out, *in)
	}
	if in.Ulimits != nil {
		in, out := &in.Ulimits, &out.Ulimits
		*out = make(map[string]*UlimitsConfig, len(*in))
		for key, val := range *in {
			var outVal *UlimitsConfig
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(UlimitsConfig)
				(*in).DeepCopyInto(*out)
			}
			(*out)[key] = outVal
		}
	}
	if in.Platforms != nil {
		in, out := &in.Platforms, &out.Platforms
		*out = make(StringList, len(*in))
		copy(*out, *in)
	}
	if in.Extensions != nil {
		out.Extensions = in.Extensions.DeepCopyExtensions()
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BuildConfig.
func (in *BuildConfig) DeepCopy() *BuildConfig {
	if in == nil {
		return nil
	}
	out := new(BuildConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Config) DeepCopyInto(out *Config) {
	*out = *in
	if in.Services != nil {
		in, out := &in.Services, &out.Services
		*out = make(Services, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
	if in.Networks != nil {
		in, out := &in.Networks, &out.Networks
		*out = make(Networks, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
	if in.Volumes != nil {
		in, out := &in.Volumes, &out.Volumes
		*out = make(Volumes, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
	if in.Secrets != nil {
		in, out := &in.Secrets, &out.Secrets
		*out = make(Secrets, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
	if in.Configs != nil {
		in, out := &in.Configs, &out.Configs
		*out = make(Configs, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
	if in.Extensions != nil {
		out.Extensions = in.Extensions.DeepCopyExtensions()
	}
	if in.Include != nil {
		in, out := &in.Include, &out.Include
		*out = make([]IncludeConfig, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Config.
func (in *Config) DeepCopy() *Config {
	if in == nil {
		return nil
	}
	out := new(Config)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigDetails) DeepCopyInto(out *ConfigDetails) {
	*out = *in
	if in.ConfigFiles != nil {
		in, out := &in.ConfigFiles, &out.ConfigFiles
		*out = make([]ConfigFile, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Environment != nil {
		in, out := &in.Environment, &out.Environment
		*out = make(Mapping, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigDetails.
func (in *ConfigDetails) DeepCopy() *ConfigDetails {
	if in == nil {
		return nil
	}
	out := new(ConfigDetails)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigFile) DeepCopyInto(out *ConfigFile) {
	*out = *in
	if in.Content != nil {
		in, out := &in.Content, &out.Content
		*out = make([]byte, len(*in))
		copy(*out, *in)
	}
	if in.Config != nil {
		out.Config = in.Config.DeepCopyExtensions()
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigFile.
func (in *ConfigFile) DeepCopy() *ConfigFile {
	if in == nil {
		return nil
	}
	out := new(ConfigFile)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigObjConfig) DeepCopyInto(out *ConfigObjConfig) {
	*out = *in
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(Labels, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.DriverOpts != nil {
		in, out := &in.DriverOpts, &out.DriverOpts
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Extensions != nil {
		out.Extensions = in.Extensions.DeepCopyExtensions()
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigObjConfig.
func (in *ConfigObjConfig) DeepCopy() *ConfigObjConfig {
	if in == nil {
		return nil
	}
	out := new(ConfigObjConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in Configs) DeepCopyInto(out *Configs) {
	{
		in := &in
		*out = make(Configs, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
		return
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Configs.
func (in Configs) DeepCopy() Configs {
	if in == nil {
		return nil
	}
	out := new(Configs)
	in.DeepCopyInto(out)
	return *out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CredentialSpecConfig) DeepCopyInto(out *CredentialSpecConfig) {
	*out = *in
	if in.Extensions != nil {
		out.Extensions = in.Extensions.DeepCopyExtensions()
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CredentialSpecConfig.
func (in *CredentialSpecConfig) DeepCopy() *CredentialSpecConfig {
	if in == nil {
		return nil
	}
	out := new(CredentialSpecConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in DependsOnConfig) DeepCopyInto(out *DependsOnConfig) {
	{
		in := &in
		*out = make(DependsOnConfig, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
		return
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DependsOnConfig.
func (in DependsOnConfig) DeepCopy() DependsOnConfig {
	if in == nil {
		return nil
	}
	out := new(DependsOnConfig)
	in.DeepCopyInto(out)
	return *out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DeployConfig) DeepCopyInto(out *DeployConfig) {
	*out = *in
	if in.Replicas != nil {
		in, out := &in.Replicas, &out.Replicas
		*out = new(int)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(Labels, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.UpdateConfig != nil {
		in, out := &in.UpdateConfig, &out.UpdateConfig
		*out = new(UpdateConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.RollbackConfig != nil {
		in, out := &in.RollbackConfig, &out.RollbackConfig
		*out = new(UpdateConfig)
		(*in).DeepCopyInto(*out)
	}
	in.Resources.DeepCopyInto(&out.Resources)
	if in.RestartPolicy != nil {
		in, out := &in.RestartPolicy, &out.RestartPolicy
		*out = new(RestartPolicy)
		(*in).DeepCopyInto(*out)
	}
	in.Placement.DeepCopyInto(&out.Placement)
	if in.Extensions != nil {
		out.Extensions = in.Extensions.DeepCopyExtensions()
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DeployConfig.
func (in *DeployConfig) DeepCopy() *DeployConfig {
	if in == nil {
		return nil
	}
	out := new(DeployConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DevelopConfig) DeepCopyInto(out *DevelopConfig) {
	*out = *in
	if in.Watch != nil {
		in, out := &in.Watch, &out.Watch
		*out = make([]Trigger, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Extensions != nil {
		out.Extensions = in.Extensions.DeepCopyExtensions()
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DevelopConfig.
func (in *DevelopConfig) DeepCopy() *DevelopConfig {
	if in == nil {
		return nil
	}
	out := new(DevelopConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DeviceRequest) DeepCopyInto(out *DeviceRequest) {
	*out = *in
	if in.Capabilities != nil {
		in, out := &in.Capabilities, &out.Capabilities
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.IDs != nil {
		in, out := &in.IDs, &out.IDs
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DeviceRequest.
func (in *DeviceRequest) DeepCopy() *DeviceRequest {
	if in == nil {
		return nil
	}
	out := new(DeviceRequest)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DiscreteGenericResource) DeepCopyInto(out *DiscreteGenericResource) {
	*out = *in
	if in.Extensions != nil {
		out.Extensions = in.Extensions.DeepCopyExtensions()
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DiscreteGenericResource.
func (in *DiscreteGenericResource) DeepCopy() *DiscreteGenericResource {
	if in == nil {
		return nil
	}
	out := new(DiscreteGenericResource)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EnvFile) DeepCopyInto(out *EnvFile) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EnvFile.
func (in *EnvFile) DeepCopy() *EnvFile {
	if in == nil {
		return nil
	}
	out := new(EnvFile)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExtendsConfig) DeepCopyInto(out *ExtendsConfig) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExtendsConfig.
func (in *ExtendsConfig) DeepCopy() *ExtendsConfig {
	if in == nil {
		return nil
	}
	out := new(ExtendsConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FileObjectConfig) DeepCopyInto(out *FileObjectConfig) {
	*out = *in
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(Labels, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.DriverOpts != nil {
		in, out := &in.DriverOpts, &out.DriverOpts
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Extensions != nil {
		out.Extensions = in.Extensions.DeepCopyExtensions()
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FileObjectConfig.
func (in *FileObjectConfig) DeepCopy() *FileObjectConfig {
	if in == nil {
		return nil
	}
	out := new(FileObjectConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FileReferenceConfig) DeepCopyInto(out *FileReferenceConfig) {
	*out = *in
	if in.Mode != nil {
		in, out := &in.Mode, &out.Mode
		*out = new(uint32)
		**out = **in
	}
	if in.Extensions != nil {
		out.Extensions = in.Extensions.DeepCopyExtensions()
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FileReferenceConfig.
func (in *FileReferenceConfig) DeepCopy() *FileReferenceConfig {
	if in == nil {
		return nil
	}
	out := new(FileReferenceConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GenericResource) DeepCopyInto(out *GenericResource) {
	*out = *in
	if in.DiscreteResourceSpec != nil {
		in, out := &in.DiscreteResourceSpec, &out.DiscreteResourceSpec
		*out = new(DiscreteGenericResource)
		(*in).DeepCopyInto(*out)
	}
	if in.Extensions != nil {
		out.Extensions = in.Extensions.DeepCopyExtensions()
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GenericResource.
func (in *GenericResource) DeepCopy() *GenericResource {
	if in == nil {
		return nil
	}
	out := new(GenericResource)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HealthCheckConfig) DeepCopyInto(out *HealthCheckConfig) {
	*out = *in
	if in.Test != nil {
		in, out := &in.Test, &out.Test
		*out = make(HealthCheckTest, len(*in))
		copy(*out, *in)
	}
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(Duration)
		**out = **in
	}
	if in.Interval != nil {
		in, out := &in.Interval, &out.Interval
		*out = new(Duration)
		**out = **in
	}
	if in.Retries != nil {
		in, out := &in.Retries, &out.Retries
		*out = new(uint64)
		**out = **in
	}
	if in.StartPeriod != nil {
		in, out := &in.StartPeriod, &out.StartPeriod
		*out = new(Duration)
		**out = **in
	}
	if in.StartInterval != nil {
		in, out := &in.StartInterval, &out.StartInterval
		*out = new(Duration)
		**out = **in
	}
	if in.Extensions != nil {
		out.Extensions = in.Extensions.DeepCopyExtensions()
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HealthCheckConfig.
func (in *HealthCheckConfig) DeepCopy() *HealthCheckConfig {
	if in == nil {
		return nil
	}
	out := new(HealthCheckConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in HealthCheckTest) DeepCopyInto(out *HealthCheckTest) {
	{
		in := &in
		*out = make(HealthCheckTest, len(*in))
		copy(*out, *in)
		return
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HealthCheckTest.
func (in HealthCheckTest) DeepCopy() HealthCheckTest {
	if in == nil {
		return nil
	}
	out := new(HealthCheckTest)
	in.DeepCopyInto(out)
	return *out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in HostsList) DeepCopyInto(out *HostsList) {
	{
		in := &in
		*out = make(HostsList, len(*in))
		for key, val := range *in {
			var outVal []string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = make([]string, len(*in))
				copy(*out, *in)
			}
			(*out)[key] = outVal
		}
		return
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HostsList.
func (in HostsList) DeepCopy() HostsList {
	if in == nil {
		return nil
	}
	out := new(HostsList)
	in.DeepCopyInto(out)
	return *out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IPAMConfig) DeepCopyInto(out *IPAMConfig) {
	*out = *in
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = make([]*IPAMPool, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(IPAMPool)
				(*in).DeepCopyInto(*out)
			}
		}
	}
	if in.Extensions != nil {
		out.Extensions = in.Extensions.DeepCopyExtensions()
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IPAMConfig.
func (in *IPAMConfig) DeepCopy() *IPAMConfig {
	if in == nil {
		return nil
	}
	out := new(IPAMConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IPAMPool) DeepCopyInto(out *IPAMPool) {
	*out = *in
	if in.AuxiliaryAddresses != nil {
		in, out := &in.AuxiliaryAddresses, &out.AuxiliaryAddresses
		*out = make(Mapping, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Extensions != nil {
		out.Extensions = in.Extensions.DeepCopyExtensions()
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IPAMPool.
func (in *IPAMPool) DeepCopy() *IPAMPool {
	if in == nil {
		return nil
	}
	out := new(IPAMPool)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IncludeConfig) DeepCopyInto(out *IncludeConfig) {
	*out = *in
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		*out = make(StringList, len(*in))
		copy(*out, *in)
	}
	if in.EnvFile != nil {
		in, out := &in.EnvFile, &out.EnvFile
		*out = make(StringList, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IncludeConfig.
func (in *IncludeConfig) DeepCopy() *IncludeConfig {
	if in == nil {
		return nil
	}
	out := new(IncludeConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in Labels) DeepCopyInto(out *Labels) {
	{
		in := &in
		*out = make(Labels, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
		return
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Labels.
func (in Labels) DeepCopy() Labels {
	if in == nil {
		return nil
	}
	out := new(Labels)
	in.DeepCopyInto(out)
	return *out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LoggingConfig) DeepCopyInto(out *LoggingConfig) {
	*out = *in
	if in.Options != nil {
		in, out := &in.Options, &out.Options
		*out = make(Options, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Extensions != nil {
		out.Extensions = in.Extensions.DeepCopyExtensions()
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LoggingConfig.
func (in *LoggingConfig) DeepCopy() *LoggingConfig {
	if in == nil {
		return nil
	}
	out := new(LoggingConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in Mapping) DeepCopyInto(out *Mapping) {
	{
		in := &in
		*out = make(Mapping, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
		return
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Mapping.
func (in Mapping) DeepCopy() Mapping {
	if in == nil {
		return nil
	}
	out := new(Mapping)
	in.DeepCopyInto(out)
	return *out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in MappingWithColon) DeepCopyInto(out *MappingWithColon) {
	{
		in := &in
		*out = make(MappingWithColon, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
		return
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MappingWithColon.
func (in MappingWithColon) DeepCopy() MappingWithColon {
	if in == nil {
		return nil
	}
	out := new(MappingWithColon)
	in.DeepCopyInto(out)
	return *out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in MappingWithEquals) DeepCopyInto(out *MappingWithEquals) {
	{
		in := &in
		*out = make(MappingWithEquals, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
		return
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MappingWithEquals.
func (in MappingWithEquals) DeepCopy() MappingWithEquals {
	if in == nil {
		return nil
	}
	out := new(MappingWithEquals)
	in.DeepCopyInto(out)
	return *out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NetworkConfig) DeepCopyInto(out *NetworkConfig) {
	*out = *in
	if in.DriverOpts != nil {
		in, out := &in.DriverOpts, &out.DriverOpts
		*out = make(Options, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	in.Ipam.DeepCopyInto(&out.Ipam)
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(Labels, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Extensions != nil {
		out.Extensions = in.Extensions.DeepCopyExtensions()
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NetworkConfig.
func (in *NetworkConfig) DeepCopy() *NetworkConfig {
	if in == nil {
		return nil
	}
	out := new(NetworkConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in Networks) DeepCopyInto(out *Networks) {
	{
		in := &in
		*out = make(Networks, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
		return
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Networks.
func (in Networks) DeepCopy() Networks {
	if in == nil {
		return nil
	}
	out := new(Networks)
	in.DeepCopyInto(out)
	return *out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in Options) DeepCopyInto(out *Options) {
	{
		in := &in
		*out = make(Options, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
		return
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Options.
func (in Options) DeepCopy() Options {
	if in == nil {
		return nil
	}
	out := new(Options)
	in.DeepCopyInto(out)
	return *out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Placement) DeepCopyInto(out *Placement) {
	*out = *in
	if in.Constraints != nil {
		in, out := &in.Constraints, &out.Constraints
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Preferences != nil {
		in, out := &in.Preferences, &out.Preferences
		*out = make([]PlacementPreferences, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Extensions != nil {
		out.Extensions = in.Extensions.DeepCopyExtensions()
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Placement.
func (in *Placement) DeepCopy() *Placement {
	if in == nil {
		return nil
	}
	out := new(Placement)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PlacementPreferences) DeepCopyInto(out *PlacementPreferences) {
	*out = *in
	if in.Extensions != nil {
		out.Extensions = in.Extensions.DeepCopyExtensions()
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PlacementPreferences.
func (in *PlacementPreferences) DeepCopy() *PlacementPreferences {
	if in == nil {
		return nil
	}
	out := new(PlacementPreferences)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Project) DeepCopyInto(out *Project) {
	*out = *in
	if in.Services != nil {
		in, out := &in.Services, &out.Services
		*out = make(Services, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
	if in.Networks != nil {
		in, out := &in.Networks, &out.Networks
		*out = make(Networks, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
	if in.Volumes != nil {
		in, out := &in.Volumes, &out.Volumes
		*out = make(Volumes, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
	if in.Secrets != nil {
		in, out := &in.Secrets, &out.Secrets
		*out = make(Secrets, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
	if in.Configs != nil {
		in, out := &in.Configs, &out.Configs
		*out = make(Configs, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
	if in.Extensions != nil {
		out.Extensions = in.Extensions.DeepCopyExtensions()
	}
	if in.ComposeFiles != nil {
		in, out := &in.ComposeFiles, &out.ComposeFiles
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Environment != nil {
		in, out := &in.Environment, &out.Environment
		*out = make(Mapping, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.DisabledServices != nil {
		in, out := &in.DisabledServices, &out.DisabledServices
		*out = make(Services, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
	if in.Profiles != nil {
		in, out := &in.Profiles, &out.Profiles
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Project.
func (in *Project) DeepCopy() *Project {
	if in == nil {
		return nil
	}
	out := new(Project)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Resource) DeepCopyInto(out *Resource) {
	*out = *in
	if in.Devices != nil {
		in, out := &in.Devices, &out.Devices
		*out = make([]DeviceRequest, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.GenericResources != nil {
		in, out := &in.GenericResources, &out.GenericResources
		*out = make([]GenericResource, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Extensions != nil {
		out.Extensions = in.Extensions.DeepCopyExtensions()
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Resource.
func (in *Resource) DeepCopy() *Resource {
	if in == nil {
		return nil
	}
	out := new(Resource)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Resources) DeepCopyInto(out *Resources) {
	*out = *in
	if in.Limits != nil {
		in, out := &in.Limits, &out.Limits
		*out = new(Resource)
		(*in).DeepCopyInto(*out)
	}
	if in.Reservations != nil {
		in, out := &in.Reservations, &out.Reservations
		*out = new(Resource)
		(*in).DeepCopyInto(*out)
	}
	if in.Extensions != nil {
		out.Extensions = in.Extensions.DeepCopyExtensions()
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Resources.
func (in *Resources) DeepCopy() *Resources {
	if in == nil {
		return nil
	}
	out := new(Resources)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RestartPolicy) DeepCopyInto(out *RestartPolicy) {
	*out = *in
	if in.Delay != nil {
		in, out := &in.Delay, &out.Delay
		*out = new(Duration)
		**out = **in
	}
	if in.MaxAttempts != nil {
		in, out := &in.MaxAttempts, &out.MaxAttempts
		*out = new(uint64)
		**out = **in
	}
	if in.Window != nil {
		in, out := &in.Window, &out.Window
		*out = new(Duration)
		**out = **in
	}
	if in.Extensions != nil {
		out.Extensions = in.Extensions.DeepCopyExtensions()
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RestartPolicy.
func (in *RestartPolicy) DeepCopy() *RestartPolicy {
	if in == nil {
		return nil
	}
	out := new(RestartPolicy)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in SSHConfig) DeepCopyInto(out *SSHConfig) {
	{
		in := &in
		*out = make(SSHConfig, len(*in))
		copy(*out, *in)
		return
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SSHConfig.
func (in SSHConfig) DeepCopy() SSHConfig {
	if in == nil {
		return nil
	}
	out := new(SSHConfig)
	in.DeepCopyInto(out)
	return *out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SSHKey) DeepCopyInto(out *SSHKey) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SSHKey.
func (in *SSHKey) DeepCopy() *SSHKey {
	if in == nil {
		return nil
	}
	out := new(SSHKey)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretConfig) DeepCopyInto(out *SecretConfig) {
	*out = *in
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(Labels, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.DriverOpts != nil {
		in, out := &in.DriverOpts, &out.DriverOpts
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Extensions != nil {
		out.Extensions = in.Extensions.DeepCopyExtensions()
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretConfig.
func (in *SecretConfig) DeepCopy() *SecretConfig {
	if in == nil {
		return nil
	}
	out := new(SecretConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in Secrets) DeepCopyInto(out *Secrets) {
	{
		in := &in
		*out = make(Secrets, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
		return
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Secrets.
func (in Secrets) DeepCopy() Secrets {
	if in == nil {
		return nil
	}
	out := new(Secrets)
	in.DeepCopyInto(out)
	return *out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServiceConfig) DeepCopyInto(out *ServiceConfig) {
	*out = *in
	if in.Profiles != nil {
		in, out := &in.Profiles, &out.Profiles
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(Mapping, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Attach != nil {
		in, out := &in.Attach, &out.Attach
		*out = new(bool)
		**out = **in
	}
	if in.Build != nil {
		in, out := &in.Build, &out.Build
		*out = new(BuildConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.Develop != nil {
		in, out := &in.Develop, &out.Develop
		*out = new(DevelopConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.BlkioConfig != nil {
		in, out := &in.BlkioConfig, &out.BlkioConfig
		*out = new(BlkioConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.CapAdd != nil {
		in, out := &in.CapAdd, &out.CapAdd
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.CapDrop != nil {
		in, out := &in.CapDrop, &out.CapDrop
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Command != nil {
		in, out := &in.Command, &out.Command
		*out = make(ShellCommand, len(*in))
		copy(*out, *in)
	}
	if in.Configs != nil {
		in, out := &in.Configs, &out.Configs
		*out = make([]ServiceConfigObjConfig, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.CredentialSpec != nil {
		in, out := &in.CredentialSpec, &out.CredentialSpec
		*out = new(CredentialSpecConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.DependsOn != nil {
		in, out := &in.DependsOn, &out.DependsOn
		*out = make(DependsOnConfig, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
	if in.Deploy != nil {
		in, out := &in.Deploy, &out.Deploy
		*out = new(DeployConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.DeviceCgroupRules != nil {
		in, out := &in.DeviceCgroupRules, &out.DeviceCgroupRules
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Devices != nil {
		in, out := &in.Devices, &out.Devices
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.DNS != nil {
		in, out := &in.DNS, &out.DNS
		*out = make(StringList, len(*in))
		copy(*out, *in)
	}
	if in.DNSOpts != nil {
		in, out := &in.DNSOpts, &out.DNSOpts
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.DNSSearch != nil {
		in, out := &in.DNSSearch, &out.DNSSearch
		*out = make(StringList, len(*in))
		copy(*out, *in)
	}
	if in.Entrypoint != nil {
		in, out := &in.Entrypoint, &out.Entrypoint
		*out = make(ShellCommand, len(*in))
		copy(*out, *in)
	}
	if in.Environment != nil {
		in, out := &in.Environment, &out.Environment
		*out = make(MappingWithEquals, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.EnvFiles != nil {
		in, out := &in.EnvFiles, &out.EnvFiles
		*out = make([]EnvFile, len(*in))
		copy(*out, *in)
	}
	if in.Expose != nil {
		in, out := &in.Expose, &out.Expose
		*out = make(StringOrNumberList, len(*in))
		copy(*out, *in)
	}
	if in.Extends != nil {
		in, out := &in.Extends, &out.Extends
		*out = new(ExtendsConfig)
		**out = **in
	}
	if in.ExternalLinks != nil {
		in, out := &in.ExternalLinks, &out.ExternalLinks
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.ExtraHosts != nil {
		in, out := &in.ExtraHosts, &out.ExtraHosts
		*out = make(HostsList, len(*in))
		for key, val := range *in {
			var outVal []string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = make([]string, len(*in))
				copy(*out, *in)
			}
			(*out)[key] = outVal
		}
	}
	if in.GroupAdd != nil {
		in, out := &in.GroupAdd, &out.GroupAdd
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.HealthCheck != nil {
		in, out := &in.HealthCheck, &out.HealthCheck
		*out = new(HealthCheckConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.Init != nil {
		in, out := &in.Init, &out.Init
		*out = new(bool)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(Labels, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.CustomLabels != nil {
		in, out := &in.CustomLabels, &out.CustomLabels
		*out = make(Labels, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Links != nil {
		in, out := &in.Links, &out.Links
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Logging != nil {
		in, out := &in.Logging, &out.Logging
		*out = new(LoggingConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.LogOpt != nil {
		in, out := &in.LogOpt, &out.LogOpt
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Networks != nil {
		in, out := &in.Networks, &out.Networks
		*out = make(map[string]*ServiceNetworkConfig, len(*in))
		for key, val := range *in {
			var outVal *ServiceNetworkConfig
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(ServiceNetworkConfig)
				(*in).DeepCopyInto(*out)
			}
			(*out)[key] = outVal
		}
	}
	if in.Ports != nil {
		in, out := &in.Ports, &out.Ports
		*out = make([]ServicePortConfig, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Scale != nil {
		in, out := &in.Scale, &out.Scale
		*out = new(int)
		**out = **in
	}
	if in.Secrets != nil {
		in, out := &in.Secrets, &out.Secrets
		*out = make([]ServiceSecretConfig, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SecurityOpt != nil {
		in, out := &in.SecurityOpt, &out.SecurityOpt
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.StopGracePeriod != nil {
		in, out := &in.StopGracePeriod, &out.StopGracePeriod
		*out = new(Duration)
		**out = **in
	}
	if in.StorageOpt != nil {
		in, out := &in.StorageOpt, &out.StorageOpt
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Sysctls != nil {
		in, out := &in.Sysctls, &out.Sysctls
		*out = make(Mapping, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Tmpfs != nil {
		in, out := &in.Tmpfs, &out.Tmpfs
		*out = make(StringList, len(*in))
		copy(*out, *in)
	}
	if in.Ulimits != nil {
		in, out := &in.Ulimits, &out.Ulimits
		*out = make(map[string]*UlimitsConfig, len(*in))
		for key, val := range *in {
			var outVal *UlimitsConfig
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(UlimitsConfig)
				(*in).DeepCopyInto(*out)
			}
			(*out)[key] = outVal
		}
	}
	if in.Volumes != nil {
		in, out := &in.Volumes, &out.Volumes
		*out = make([]ServiceVolumeConfig, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.VolumesFrom != nil {
		in, out := &in.VolumesFrom, &out.VolumesFrom
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Extensions != nil {
		out.Extensions = in.Extensions.DeepCopyExtensions()
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServiceConfig.
func (in *ServiceConfig) DeepCopy() *ServiceConfig {
	if in == nil {
		return nil
	}
	out := new(ServiceConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServiceConfigObjConfig) DeepCopyInto(out *ServiceConfigObjConfig) {
	*out = *in
	if in.Mode != nil {
		in, out := &in.Mode, &out.Mode
		*out = new(uint32)
		**out = **in
	}
	if in.Extensions != nil {
		out.Extensions = in.Extensions.DeepCopyExtensions()
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServiceConfigObjConfig.
func (in *ServiceConfigObjConfig) DeepCopy() *ServiceConfigObjConfig {
	if in == nil {
		return nil
	}
	out := new(ServiceConfigObjConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServiceDependency) DeepCopyInto(out *ServiceDependency) {
	*out = *in
	if in.Extensions != nil {
		out.Extensions = in.Extensions.DeepCopyExtensions()
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServiceDependency.
func (in *ServiceDependency) DeepCopy() *ServiceDependency {
	if in == nil {
		return nil
	}
	out := new(ServiceDependency)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServiceNetworkConfig) DeepCopyInto(out *ServiceNetworkConfig) {
	*out = *in
	if in.Aliases != nil {
		in, out := &in.Aliases, &out.Aliases
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.LinkLocalIPs != nil {
		in, out := &in.LinkLocalIPs, &out.LinkLocalIPs
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.DriverOpts != nil {
		in, out := &in.DriverOpts, &out.DriverOpts
		*out = make(Options, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Extensions != nil {
		out.Extensions = in.Extensions.DeepCopyExtensions()
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServiceNetworkConfig.
func (in *ServiceNetworkConfig) DeepCopy() *ServiceNetworkConfig {
	if in == nil {
		return nil
	}
	out := new(ServiceNetworkConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServicePortConfig) DeepCopyInto(out *ServicePortConfig) {
	*out = *in
	if in.Extensions != nil {
		out.Extensions = in.Extensions.DeepCopyExtensions()
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServicePortConfig.
func (in *ServicePortConfig) DeepCopy() *ServicePortConfig {
	if in == nil {
		return nil
	}
	out := new(ServicePortConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServiceSecretConfig) DeepCopyInto(out *ServiceSecretConfig) {
	*out = *in
	if in.Mode != nil {
		in, out := &in.Mode, &out.Mode
		*out = new(uint32)
		**out = **in
	}
	if in.Extensions != nil {
		out.Extensions = in.Extensions.DeepCopyExtensions()
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServiceSecretConfig.
func (in *ServiceSecretConfig) DeepCopy() *ServiceSecretConfig {
	if in == nil {
		return nil
	}
	out := new(ServiceSecretConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServiceVolumeBind) DeepCopyInto(out *ServiceVolumeBind) {
	*out = *in
	if in.Extensions != nil {
		out.Extensions = in.Extensions.DeepCopyExtensions()
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServiceVolumeBind.
func (in *ServiceVolumeBind) DeepCopy() *ServiceVolumeBind {
	if in == nil {
		return nil
	}
	out := new(ServiceVolumeBind)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServiceVolumeConfig) DeepCopyInto(out *ServiceVolumeConfig) {
	*out = *in
	if in.Bind != nil {
		in, out := &in.Bind, &out.Bind
		*out = new(ServiceVolumeBind)
		(*in).DeepCopyInto(*out)
	}
	if in.Volume != nil {
		in, out := &in.Volume, &out.Volume
		*out = new(ServiceVolumeVolume)
		(*in).DeepCopyInto(*out)
	}
	if in.Tmpfs != nil {
		in, out := &in.Tmpfs, &out.Tmpfs
		*out = new(ServiceVolumeTmpfs)
		(*in).DeepCopyInto(*out)
	}
	if in.Extensions != nil {
		out.Extensions = in.Extensions.DeepCopyExtensions()
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServiceVolumeConfig.
func (in *ServiceVolumeConfig) DeepCopy() *ServiceVolumeConfig {
	if in == nil {
		return nil
	}
	out := new(ServiceVolumeConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServiceVolumeTmpfs) DeepCopyInto(out *ServiceVolumeTmpfs) {
	*out = *in
	if in.Extensions != nil {
		out.Extensions = in.Extensions.DeepCopyExtensions()
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServiceVolumeTmpfs.
func (in *ServiceVolumeTmpfs) DeepCopy() *ServiceVolumeTmpfs {
	if in == nil {
		return nil
	}
	out := new(ServiceVolumeTmpfs)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServiceVolumeVolume) DeepCopyInto(out *ServiceVolumeVolume) {
	*out = *in
	if in.Extensions != nil {
		out.Extensions = in.Extensions.DeepCopyExtensions()
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServiceVolumeVolume.
func (in *ServiceVolumeVolume) DeepCopy() *ServiceVolumeVolume {
	if in == nil {
		return nil
	}
	out := new(ServiceVolumeVolume)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in Services) DeepCopyInto(out *Services) {
	{
		in := &in
		*out = make(Services, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
		return
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Services.
func (in Services) DeepCopy() Services {
	if in == nil {
		return nil
	}
	out := new(Services)
	in.DeepCopyInto(out)
	return *out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in ShellCommand) DeepCopyInto(out *ShellCommand) {
	{
		in := &in
		*out = make(ShellCommand, len(*in))
		copy(*out, *in)
		return
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ShellCommand.
func (in ShellCommand) DeepCopy() ShellCommand {
	if in == nil {
		return nil
	}
	out := new(ShellCommand)
	in.DeepCopyInto(out)
	return *out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in StringList) DeepCopyInto(out *StringList) {
	{
		in := &in
		*out = make(StringList, len(*in))
		copy(*out, *in)
		return
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StringList.
func (in StringList) DeepCopy() StringList {
	if in == nil {
		return nil
	}
	out := new(StringList)
	in.DeepCopyInto(out)
	return *out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in StringOrNumberList) DeepCopyInto(out *StringOrNumberList) {
	{
		in := &in
		*out = make(StringOrNumberList, len(*in))
		copy(*out, *in)
		return
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StringOrNumberList.
func (in StringOrNumberList) DeepCopy() StringOrNumberList {
	if in == nil {
		return nil
	}
	out := new(StringOrNumberList)
	in.DeepCopyInto(out)
	return *out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ThrottleDevice) DeepCopyInto(out *ThrottleDevice) {
	*out = *in
	if in.Extensions != nil {
		out.Extensions = in.Extensions.DeepCopyExtensions()
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ThrottleDevice.
func (in *ThrottleDevice) DeepCopy() *ThrottleDevice {
	if in == nil {
		return nil
	}
	out := new(ThrottleDevice)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Trigger) DeepCopyInto(out *Trigger) {
	*out = *in
	if in.Ignore != nil {
		in, out := &in.Ignore, &out.Ignore
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Trigger.
func (in *Trigger) DeepCopy() *Trigger {
	if in == nil {
		return nil
	}
	out := new(Trigger)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UlimitsConfig) DeepCopyInto(out *UlimitsConfig) {
	*out = *in
	if in.Extensions != nil {
		out.Extensions = in.Extensions.DeepCopyExtensions()
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UlimitsConfig.
func (in *UlimitsConfig) DeepCopy() *UlimitsConfig {
	if in == nil {
		return nil
	}
	out := new(UlimitsConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UpdateConfig) DeepCopyInto(out *UpdateConfig) {
	*out = *in
	if in.Parallelism != nil {
		in, out := &in.Parallelism, &out.Parallelism
		*out = new(uint64)
		**out = **in
	}
	if in.Extensions != nil {
		out.Extensions = in.Extensions.DeepCopyExtensions()
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UpdateConfig.
func (in *UpdateConfig) DeepCopy() *UpdateConfig {
	if in == nil {
		return nil
	}
	out := new(UpdateConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VolumeConfig) DeepCopyInto(out *VolumeConfig) {
	*out = *in
	if in.DriverOpts != nil {
		in, out := &in.DriverOpts, &out.DriverOpts
		*out = make(Options, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(Labels, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Extensions != nil {
		out.Extensions = in.Extensions.DeepCopyExtensions()
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VolumeConfig.
func (in *VolumeConfig) DeepCopy() *VolumeConfig {
	if in == nil {
		return nil
	}
	out := new(VolumeConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in Volumes) DeepCopyInto(out *Volumes) {
	{
		in := &in
		*out = make(Volumes, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
		return
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Volumes.
func (in Volumes) DeepCopy() Volumes {
	if in == nil {
		return nil
	}
	out := new(Volumes)
	in.DeepCopyInto(out)
	return *out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WeightDevice) DeepCopyInto(out *WeightDevice) {
	*out = *in
	if in.Extensions != nil {
		out.Extensions = in.Extensions.DeepCopyExtensions()
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WeightDevice.
func (in *WeightDevice) DeepCopy() *WeightDevice {
	if in == nil {
		return nil
	}
	out := new(WeightDevice)
	in.DeepCopyInto(out)
	return out
}
